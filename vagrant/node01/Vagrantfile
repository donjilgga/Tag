# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.

Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # B
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64"
  config.vm.hostname = "node01"
  # config.vm.network "private_network", ip: "172.16.12.101"
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access

  config.vm.network "forwarded_port", guest: 28080, host: 28080, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 7056, host: 7056, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 8051, host: 8051, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 8056, host: 8056, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 7051, host: 7051, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 6984, host: 6984, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 8054, host: 8054, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 7054, host: 7054, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 7050, host: 7050, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 7984, host: 7984, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 8984, host: 8984, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 5984, host: 5984, host_ip: "127.0.0.1"
  

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "public_network", bridge: "eth0"
    
  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "./data", "/home/vagrant/data/"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = false
  
    # Customize the amount of memory on the VM:
    vb.memory = "8192"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    sudo apt-get update
    sudo apt-get  install -y docker.io
    sudo apt install -y docker-compose
    sudo curl -sSL https://bit.ly/2ysbOFE | sudo bash -s -- 1.4.1 1.4.1
    sudo apt-get install -y openjdk-8-jre
    sudo apt-get install -y openjdk-8-jdk
    sudo apt install -y maven
    sudo usermod -aG docker vagrant
    sudo reboot
    
  SHELL
end
